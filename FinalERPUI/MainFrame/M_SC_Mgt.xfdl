<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="scheduler" width="1670" height="835" titletext="New Form" onload="M_SC_Mgt_onload">
    <Layouts>
      <Layout height="600" mobileorientation="landscape" width="820" stepcount="0">
        <Graphics id="grpScheduler" taborder="0" left="10" top="60" ondblclick="grpScheduler_ondblclick" right="10" bottom="40" onclick="grpScheduler_onclick" onsize="grpScheduler_onsize" minwidth="100" maxwidth="" minheight="100" maxheight=""/>
        <Button id="btnPrev" taborder="1" text="&lt;" left="622" top="10" width="60" height="40" onclick="btnPrev_onclick"/>
        <Button id="btnNext" taborder="2" text="&gt;" left="995" top="10" width="60" height="40" onclick="btnNext_onclick"/>
        <Static id="stYearMonth" taborder="3" left="740" top="11" width="200" height="39" textAlign="center" font="bold 24px/normal &quot;Gulim&quot;"/>
        <Button id="btnNew" taborder="4" text="신규일정" left="1407" top="10" width="60" onclick="btnNew_onclick" height="40"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsSchedule">
        <ColumnInfo>
          <Column id="ID" type="STRING" size="256"/>
          <Column id="SDATE" type="STRING" size="256"/>
          <Column id="EDATE" type="STRING" size="256"/>
          <Column id="TITLE" type="STRING" size="256"/>
          <Column id="CONTENT" type="STRING" size="256"/>
          <Column id="TYPE" type="STRING" size="256"/>
          <Column id="SCH_NO" type="STRING" size="256"/>
          <Column id="E_NO" type="STRING" size="256"/>
          <Column id="E_NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/**
*  @MenuPath    techtip > scheduler
*  techtip Graphics Component를 활용한 월 스케줄러
*  @FileName	workflow.xfdl 
*******************************************************************************
*  2020.06.12		daewon			최초 생성
*******************************************************************************
*/

/**************************************************************************
 * include 영역  
**************************************************************************/
include "lib::lib_base.xjs";
include "lib::lib_date.xjs";
include "lib::lib_schedulerv2.xjs";

/**************************************************************************
 * FORM 변수 선언 영역
**************************************************************************/
this.application = null;
/**************************************************************************
 * FORM EVENT 영역(onload)
**************************************************************************/
this.M_SC_Mgt_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{	
	this.application = nexacro.getApplication();
 	this.fn_scheduleSel();
	/*this.transactionCount = this.application.transactionCount;*/
// 	this.fn_scheduleMake();
};

this.fn_scheduleMake = function(){
	for(var a = 0; a < 3; a++){
		trace(this.dsSchedule.getColumn(a,"ID"));
	}
	//스케줄러 설정정보 만들기
	var objConfig = {
						//오늘일자
						"todate" : null,
						
						//현재 표현일자
						"date" : null,
						
						//스케줄 정보를 가지고 있는 데이터셋
						"binddataset" : this.dsSchedule,
						
						//요일 영역
						"week" : {
									//요일 표현 텍스트 리스트
									"weekformat" : ["일", "월", "화", "수", "목", "금", "토"],
									
									//요일 영역 높이
									"height" : 20,
									
									//요일 배경 속성
									"graphicsrect" : {
												"x" : 0, "y" : 0, "width" : 0, "height" : 0,
												"fillstyle" : "#ffffff",
												"strokepen" : "1px solid #000000"
											 },
											 
									//요일 텍스트 속성
									"graphicstext" : {
												"x" : 0, "y" : 0,
												"text" : "",
												"textAlign" : "center",
												"verticalAlign" : "middle",
												"font" : 'bold 9pt arial',
												"color" : "#000000"
											 }
									
									
								 },
						
						//일자 영역
						"day" : {
									//기본일자 텍스트 색상
									"textcolor" : "#000000",
									
									//일요일 텍스트 색상
									"textcolor_sun" : "#ff0000",
									
									//토요일 텍스트 색상
									"textcolor_sat" : "#0000ff",
									
									//이전 or 이후 월 텍스트 색상
									"textcolor_disable" : "#888888",
									
									//일자 배경 속성
									"graphicsrect" : {
												"x" : 0, "y" : 0, "width" : 0, "height" : 0,
												"fillstyle" : "#ffffff",
												"strokepen" : "1px solid #000000"
											 },
											 
									//일자 텍스트 속성
									"graphicstext" : {
												"x" : 0, "y" : 0,
												"text" : "",
												"textAlign" : "right",
												"verticalAlign" : "top",
												"font" : 'bold 9pt arial',
												"color" : ""
											 }
								},
						//일정 영역		
						"schedule" : {
										//일정 타입별 배경색
										"type" : {
													"0" : "#f9423a",
													"1" : "#f4da40",
													"2" : "#74d1ea"
												 },
												 
										//일정 영역 높이
										"height" : 20,
										
										//일정 간 간격
										"gap" : 5,
										
										//일정 배경 속성
										"graphicsrect" : {
															"x" : 0, "y" : 0, "width" : 0, "height" : 0,
															"fillstyle" : "#ffffff",
															"strokepen" : "1px solid #000000"
														 },
														 
										//일정 텍스트 속성
										"graphicstext" : {
													"x" : 0, "y" : 0,
													"text" : "",
													"textAlign" : "left",
													"verticalAlign" : "middle",
													"font" : 'bold 9pt arial',
													"color" : "#ffffff"
												 }
									 },
						//더보기 영역		
						"more" : {
									//더보기 높이
									"height" : 20,
									
									//더보기 배경 속성
									"graphicsrect" : {
														"x" : 0, "y" : 0, "width" : 0, "height" : 0,
														"fillstyle" : "#888888",
														"strokepen" : "1px solid #000000"
													 },
									
									//더보기 텍스트 속성
									"graphicstext" : {
														"x" : 0, "y" : 0,
														"text" : "More",
														"textAlign" : "left",
														"verticalAlign" : "middle",
														"font" : 'bold 9pt arial',
														"color" : "#000000"
													 }
								}
					}
	
	//스케줄러 초기화 함수 호출
	this.gfnInitScheduler(this.grpScheduler, objConfig);
	
	//스케줄러 현재월 텍스트 구해오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(this.grpScheduler.config.date, "yyyy.MM");
	
	//현재월 텍스트 설정
	this.stYearMonth.set_text(sYearMonth);
}

this.fn_scheduleSel = function(){
	var svcCount = this.application.transactionCount++;
	this.transaction("scheduleSel" + svcCount
		,"SvcURL::/mscmgt/getOSSel.mpg?no=" + svcCount
		,""
		,"dsSchedule=out_test"
		,""
		,"fn_scheduleMake");
}

/**************************************************************************
 * CALLBACK 콜백 처리부분(Transaction)
 **************************************************************************/

/**************************************************************************
 * CRUD 및 TRANSACTION 서비스 호출 처리
 **************************************************************************/
 
 /**************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 **************************************************************************/
/**
 * @description 신규일정 버튼 onclick 시 처리내역
*/
this.btnNew_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//팝업오픈 함수 호출
	this.fnOpenSchedulePop("new");
};

/**
 * @description 이전 버튼 onclick 시 처리내역
*/
this.btnPrev_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//스케줄러 현재월 정보 가져오기
	var objDate = this.grpScheduler.config.date;
	
	//이전월 정보 가져오기
	var objPrevDate = this.gfnAddMonth(objDate, -1);
	
	//이전월 텍스트 가져오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(objPrevDate, "yyyy.MM");
	
	//이전월로 텍스트 설정
	this.stYearMonth.set_text(sYearMonth);
	
	//이전월로 스케줄러 설정 함수 호출
	this.gfnSetScheduler(this.grpScheduler, objPrevDate);
};

/**
 * @description 다음 버튼 onclick 시 처리내역
*/
this.btnNext_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	//스케줄러 현재월 정보 가져오기
	var objDate = this.grpScheduler.config.date;
	
	//다음월 정보 가져오기
	var objNextDate = this.gfnAddMonth(objDate, 1);
	
	//다음월 텍스트 가져오기
	var sYearMonth = this.gfnGetMaskFormatDateToString(objNextDate, "yyyy.MM");
	
	//다음월로 텍스트 설정
	this.stYearMonth.set_text(sYearMonth);
	
	//다음월로 스케줄러 설정 함수 호출
	this.gfnSetScheduler(this.grpScheduler, objNextDate);
};

/**
 * @description Graphics Component onsize 시 처리내역
*/
this.grpScheduler_onsize = function(obj:nexacro.Graphics,e:nexacro.SizeEventInfo)
{
	//Graphics 컴포넌트의 사이즈가 변경되었을 경우
	//스케줄러 설정함수를 호출하여 사이즈 갱신
	this.gfnSetScheduler(this.grpScheduler);
};

/**
 * @description Graphics Component onclick 시 처리내역
*/
this.grpScheduler_onclick = function(obj:nexacro.Graphics,e:nexacro.ClickEventInfo)
{
	//클릭된 위치의 Graphic 오브젝트 가져오기
	var objHitTest = obj.hitTest(e.canvasx, e.canvasy);
	
	var objSchedulePop = obj.getObjectByID("schedulepop");
	
	if(objSchedulePop)
	{
		if(objHitTest.id.split("_")[0]!="schedule")
		{
			this.gfnLoadScheduler(obj);
			return;
		}
	}
	
	//클릭된 오브젝트가 더보기일 경우
	if(objHitTest.id.split("_")[0]=="more")
	{
		//더보기 일정 팝업 함수 호출
		this.gfnLoadSchedulePop(obj, objHitTest);
	}
};

/**
 * @description Graphics Component ondblclick 시 처리내역
*/
this.grpScheduler_ondblclick = function(obj:nexacro.Graphics,e:nexacro.MouseEventInfo)
{
	var oArg;
	var nRow;
	var sId;
	var sDate;
	var sType;
	var sTitle;
	var sContent;
	var sSch_No;
	var sE_No;
	var sE_Name;
	var objSchedule;
	
	//더블 클릭된 위치의 Graphic 오브젝트 가져오기
	var objGraphic = obj.hitTest(e.canvasx, e.canvasy);
	
	//스케줄러 설정정보 가져오기
	var objConfig = obj.config;
	
	//스케줄러와 연결된 데이터셋 가져오기
	var objDs = objConfig.binddataset;
	
	//더블 클릭된 오브젝트가 일정영역일 경우
	if(objGraphic.id.split("_")[0]=="schedule")
	{
		//일정 그룹 오브젝트 가져오기
		objSchedule = objGraphic.parent;
		
		//일정의 ID 가져오기
		sId = objGraphic.id.split("_")[1];
		
		//데이터셋에서 ID에 해당하는 일정 찾기
		nRow = objDs.findRow("ID", sId);
		
		//일정 일자 가져오기
		sSDate = objDs.getColumn(nRow, "SDATE");
		
		//일정 일자 가져오기
		sEDate = objDs.getColumn(nRow, "EDATE");
		
		//일정 타입 가져오기
		sType = objDs.getColumn(nRow, "TYPE");
		
		//일정 제목 가져오기
		sTitle = objDs.getColumn(nRow, "TITLE");
		
		//일정 내용 가져오기
		sContent = objDs.getColumn(nRow, "CONTENT");
		
		//일정 번호 가져오기
		sSch_No = objDs.getColumn(nRow, "SCH_NO");
		
		//일정 작성자 사원번호 가져오기
		sE_No = objDs.getColumn(nRow, "E_NO");
		
		//일정 작성자 이름 가져오기
		sE_Name = objDs.getColumn(nRow, "E_NAME");		
		
		//팝업오픈 함수 호출
		this.fnOpenSchedulePop("modify", sId, sSDate, sEDate, sType, sTitle, sContent, sSch_No, sE_No, sE_Name);
		
		return;
	}
	
	var objHitTests = obj.hitTestAll(e.canvasx, e.canvasy);
	
	for(var i=0;i<objHitTests.length;i++)
	{
		objGraphic = objHitTests[i];
		
		//더블 클릭된 오브젝트가 일자영역일 경우
		if(objGraphic.id.split("_")[0]=="day")
		{
			//일자 그룹 오브젝트 가져오기
			objDay = objGraphic.parent;
			
			//일자 정보 가져오기(ex) day_20200612 --> 20200612)
			sDate = objDay.id.split("_")[1];
			
			//팝업오픈 함수 호출
			this.fnOpenSchedulePop("new", null, sDate);
			
			return;
		}
	}
};

/**************************************************************************
 * 사용자 FUNCTION 영역
**************************************************************************/
/**
* @description 	      	: 팝업 호출 함수
* @param sPopupType		: 팝업 타입(new : 신규, modify 수정)
* @param sId    		: 일정 ID
* @param sDate    		: 일정 일자
* @param sType    		: 일정 타입
* @param sTitle    		: 일정 제목
* @param sContent    	: 일정 내용
* @return             	: 없음
*/
this.fnOpenSchedulePop = function(sPopupType, sId, sSDate, sEDate, sType, sTitle, sContent, sSch_No, sE_No, sE_Name)
{
	var oArg = { "popuptype" : sPopupType, "scheduleid" : "", "SDATE" : "", "EDATE" : "", "TYPE" : "", "TITLE" : "", "CONTENT" : "", "SCH_NO" : "", "E_NO" : "", "E_NAME" : "" };
	
	if(sId)oArg.scheduleid = sId;
	if(sSDate)oArg.SDATE = sSDate;
	if(sEDate)oArg.EDATE = sEDate;
	if(sType)oArg.TYPE = sType;
	if(sTitle)oArg.TITLE = sTitle;
	if(sContent)oArg.CONTENT = sContent;
	if(sSch_No)oArg.SCH_NO = sSch_No;
	if(sE_No)oArg.E_NO = sE_No;
	if(sE_Name)oArg.E_NAME = sE_Name;
	
	this.gfnShowModal("popupModal", oArg, "ModalFrame::M_SC_Sel.xfdl", "fnPopupCallBack", this, 400, 300, true, true, null);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
* @description 	      	: 팝업 콜백 함수
* @param sFormId		: 팝업 ID
* @param sArg    		: 일정 정보
* @return             	: 없음
*/
this.fnPopupCallBack = function(sFormId, sArg)
{
	if(sFormId == 'popupModal')
	{
		//일정 정보가 있을 경우
		if(sArg)
		{
			var nRow;
			var param;
			var svcURL;
			var svcID;
			//일정 정보를 JSON오브젝트로 만들기
			var objRtn = JSON.parse(sArg);
			
			//수정일 경우
			if(objRtn.popuptype=="modify")
			{
				//데이터셋에서 ID에 해당하는 일정 찾기
				nRow = this.dsSchedule.findRow("ID", objRtn.ID);
				
				//일정 정보 변경
				this.dsSchedule.setColumn(nRow, "TITLE", objRtn.TITLE);
				this.dsSchedule.setColumn(nRow, "SDATE", objRtn.SDATE);
				this.dsSchedule.setColumn(nRow, "EDATE", objRtn.EDATE);
				this.dsSchedule.setColumn(nRow, "TYPE", objRtn.TYPE);
				this.dsSchedule.setColumn(nRow, "CONTENT", objRtn.CONTENT);
				
				
			}
			//신규일 경우
			else if(objRtn.popuptype=="new")
			{
				//현재 사원정보가 들어있는 GLOBAL DATASET 가져오기
				var objgdsLoginInfo = this.application.objgdsLoginInfo;
				
				//일정번호 채번
				var sch_no = this.dsSchedule.getCaseCount(" SDATE == '"+ objRtn.SDATE +"' ") + 1;
				
				//신규 Row 추가
				nRow = this.dsSchedule.addRow();
				
				//일정 정보 등록
				this.dsSchedule.setColumn(nRow, "ID", nexacro.round(Math.random()*1000, 0));
				this.dsSchedule.setColumn(nRow, "TITLE", objRtn.TITLE);
				this.dsSchedule.setColumn(nRow, "SDATE", objRtn.SDATE);
				this.dsSchedule.setColumn(nRow, "EDATE", objRtn.EDATE);
				this.dsSchedule.setColumn(nRow, "TYPE", objRtn.TYPE);
				this.dsSchedule.setColumn(nRow, "CONTENT", objRtn.CONTENT);
				this.dsSchedule.setColumn(nRow, "SCH_NO", sch_no);
				this.dsSchedule.setColumn(nRow, "E_NO", objgdsLoginInfo.getColumn(0, "E_NO"));
				this.dsSchedule.setColumn(nRow, "E_NAME", objgdsLoginInfo.getColumn(0, "E_NAME"));
				
				trace(this.dsSchedule.getCaseCount(" SDATE == '"+ objRtn.SDATE +"' ") + 1);
				svcID = "getOSIns" + this.application.transactionCount++;
				svcURL = "SvcURL::/mscmgt/getOSIns.mpg?no=" + svcID;
				param = " sch_date=" + objRtn.SDATE + " sch_no=" + sch_no + " sch_name=" + objRtn.TITLE + " scht_no=" + objRtn.TYPE +
							" sch_content=" + objRtn.CONTENT + " sch_enddate=" + objRtn.EDATE + " e_no=" + objgdsLoginInfo.getColumn(0, "E_NO");
				this.transaction(svcID, svcURL, "", "", param, "fn_LoadScheduler");
			}
			else if(objRtn.popuptype == "delete"){
				nRow = this.dsSchedule.findRow("ID", objRtn.ID);
				
				var sch_no = this.dsSchedule.getColumn(nRow, "SCH_NO");
				var sch_sdate = this.dsSchedule.getColumn(nRow, "SDATE");
				
				this.dsSchedule.deleteRow(nRow);
				//////////////삭제코드 진행..//////////////////////////////
				svcID = "getOSDel" + this.application.transactionCount++;
				svcURL = "SvcURL::/mscmgt/getOSDel.mpg?no=" + svcID;
				param = " sch_date=" + sch_sdate + " sch_no=" + sch_no + " e_no=" + objgdsLoginInfo.getColumn(0, "E_NO");
				this.transaction(svcID, svcURL, "", "", param, "fn_LoadScheduler");
			}
		}
	}
}

this.fn_LoadScheduler = function(){
		//스케줄 조회 함수 호출
		this.gfnLoadScheduler(this.grpScheduler);
		this.fn_scheduleSel();
}

/**
* @description 	      		: 팝업 공통 함수
* @param sPopupId  			: 팝업 ID
* @param arrArguments    	: 전달할 Arguments
* @param sPopupUrl    		: 팝업 URL
* @param popupCallback    	: 팝업 Callback 함수명
* @param obj    			: 부모 Form 오브젝트
* @param nPopupWidth    	: 팝업 Width
* @param nPopupHeight    	: 팝업 Height
* @param bShowFrameTitle    : 타이틀바 표현 여부
* @param bShowFrameStatus	: 스테이터스바 표현 여부
* @param sAlignType			: 팝업 표시 위치 
* @return             		: 없음
*/
this.gfnShowModal = function (sPopupId, arrArguments, sPopupUrl, popupCallback, obj, nPopupWidth, nPopupHeight, bShowFrameTitle, bShowFrameStatus, sAlignType)
{
	// 현재 구동되는 정보를 업데이트 한다.
	var childFrame = new ChildFrame();
	var parentFrame = obj.getOwnerFrame();
	
	var sOpenAlignType = "center middle";

	// TO-DO 팝업사이즈 미지정 시 디폴트 값 적용
	if (this.gfnIsNull(nPopupWidth)) 
	{
		nPopupWidth = obj.confing.popupWidth;
	}

	if (this.gfnIsNull(nPopupHeight)) 
	{
		nPopupHeight = obj.confing.popupHeight;
	}

	var sShowStatus;
	if (this.gfnIsNull(bShowFrameStatus) || bShowFrameStatus == false) 
	{
		sShowStatus = false;
	}
	else if (bShowFrameStatus == true) 
	{
		sShowStatus = true;
	}
	
	if (!this.gfnIsNull(sAlignType)) 
	{
		sOpenAlignType = sAlignType;
	}

	var nPopupLeft = "";
	var nPopupTop = "";

	// 팝업 포지션 값 위치 설정
	nPopupLeft = 0;
	nPopupTop = 0;
	
	/* ===== Statusbar 옵션 추가 - Start ===== */
	if (sShowStatus == true) 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4 + 25, null, null, sPopupUrl);
		childFrame.set_statusbarheight(25);
		childFrame.set_showstatusbar(true);
	}
	else 
	{
		childFrame.init(sPopupId, nPopupLeft, nPopupTop, nexacro.toNumber(nPopupWidth) + 4, nexacro.toNumber(nPopupHeight) + 20 + 4, null, null, sPopupUrl);
	}
	
	/* ===== Statusbar 옵션 추가 - End   ===== */
	childFrame.set_openalign(sOpenAlignType);
	childFrame.set_overlaycolor("RGBA(204, 204, 204, 0.5)");
	childFrame.set_autosize(false);	
	childFrame.set_dragmovetype("normal");

	if (this.gfnIsNull(bShowFrameTitle) || bShowFrameTitle == true) 
	{
		childFrame.set_showtitlebar(true);
		childFrame.set_border("3 solid #351b6f");
		childFrame.set_border("normal");
	}else{
		childFrame.set_showtitlebar(false);
	}
	
	// 동적으로 생성한 ChildFrame을 Modal Dialog로 보여줌.
	childFrame.showModal(parentFrame, arrArguments, obj, popupCallback, true);
};
]]></Script>
  </Form>
</FDL>
